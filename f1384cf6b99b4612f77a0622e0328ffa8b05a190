{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ac32b399_2b9234f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2021-07-05T12:21:02Z",
      "side": 1,
      "message": "I\u0027ve verified that the generated code doesn\u0027t change for AArch32 builds of Chromium, so there are no performance implications for this change.\n\nAArch64 doesn\u0027t require the same change because it doesn\u0027t have any memory alignment requirements.\n\nenh@ - we\u0027ll need this in AOSP too.\n\nPTAL, thanks.",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f35b4fee_12553a49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1004789
      },
      "writtenOn": "2021-07-07T15:44:36Z",
      "side": 1,
      "message": "\u003e enh@ - we\u0027ll need this in AOSP too.\n\ni don\u0027t think we do (so i won\u0027t be backporting this to S), because Android explicitly compiles this library for arm rather than thumb [https://source.corp.google.com/android/external/libjpeg-turbo/Android.bp;l\u003d112?q\u003dfile:external%2Flibjpeg.*android.bp\u0026sq\u003dpackage:%5Eandroid$], but i\u0027ll sync AOSP anyway...",
      "parentUuid": "ac32b399_2b9234f3",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbe2d9f1_00d81f0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1004789
      },
      "writtenOn": "2021-07-08T23:51:46Z",
      "side": 1,
      "message": "lol, i hadn\u0027t noticed this wasn\u0027t merged yet so i have the fairly useless AOSP sync https://android-review.googlesource.com/c/platform/external/libjpeg-turbo/+/1761049 which gets the change before this one.\n\ni\u0027ll let scroggo decide whether to +2 that, or just wait until this CL is merged since i\u0027ll have to do another update anyway...",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce2acff8_a75609cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2021-07-09T09:50:15Z",
      "side": 1,
      "message": "Thanks, sorry for messing you around",
      "parentUuid": "dbe2d9f1_00d81f0f",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b4fa6d6_c14fbbc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2021-07-09T09:50:15Z",
      "side": 1,
      "message": "While the bad STM instruction is emitted when the -mthumb option is present, there\u0027s nothing stopping the compiler from emitting it when compiling explicitly for Arm - if the compiler implementation changes, this could break.",
      "parentUuid": "f35b4fee_12553a49",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6de26fd_752d2f0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1125499
      },
      "writtenOn": "2021-07-09T15:14:23Z",
      "side": 1,
      "message": "Drive-by LGTM.\n\nLeon is more familiar with how this will matter to Android, so it is wise to get his approval.",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46c19441_d1217ac0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2021-07-09T15:15:49Z",
      "side": 1,
      "message": "Whoops. LGTM from my @chromium account",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5c5618a_9e077040",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1004789
      },
      "writtenOn": "2021-07-09T15:38:15Z",
      "side": 1,
      "message": "yeah, makes sense, but still below the bar for backporting to S (since we won\u0027t be changing the compiler version in that branch, and the current version doesn\u0027t do this).\n\n(tbh, before this CL i didn\u0027t realize that STM/LDM still had alignment restrictions. https://www.keil.com/support/man/docs/armasm/armasm_dom1359731171041.htm answers the question i was going to ask you about LDRD/STRD, but if you have any influence over your documentation folks, it would be really nice if \"Other data-accessing instructions always cause an alignment exception for unaligned data\" actually listed the instructions. seems weird to list the _safe_ instructions but not the _unsafe_ ones! tbh, i think if you\u0027d asked me last week i\u0027d have said there weren\u0027t any unsafe ones, and then admitted i didn\u0027t know about LDRD/STRD. LDM/STM wouldn\u0027t have occurred to me.)\n\nbtw, do you have a canonical reference for \"nor - for the most part - do cores executing in AArch64 mode incur a performance penalty when making unaligned memory accesses\" which you said on the github bug? that very question came up in a different context the other day, and while we all _believe_ this, you as an Arm employee are so far the most authoritative source i\u0027ve seen for this :-)",
      "parentUuid": "1b4fa6d6_c14fbbc4",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20ca510b_b7f44c97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2021-07-12T15:30:35Z",
      "side": 1,
      "message": "Thanks for the confirmation about the compiler behavior for Android S.\n\nOn memory access performance, every Arm core has a publicly available Software Optimization Guide (SWOG). (The Cortex-A76 version can be downloaded here.[1]) Within the SWOG, there\u0027s a section on \"Load/Store Alignment.\" For the Cortex-A76, this section reads as follows:\n\n\"The Armv8.2-A architecture allows many types of load and store accesses to be arbitrarily aligned. The Cortex-A76 processor handles most unaligned accesses without performance penalties. However, there are cases which reduce bandwidth or incur additional latency, as described below.\n  •Load operations that cross a cache-line (64-byte) boundary.\n  •Quad-word load operations that are not 4B aligned.\n  •Store operations that cross a 16B boundary.\"\n\nNote that such characteristics are present from Armv8.0-A-generation cores - it says Armv8.2-A here because that\u0027s what the Cortex-A76 implements.\n\n[1] https://developer.arm.com/documentation/pjdoc466751330-7215/latest",
      "parentUuid": "d5c5618a_9e077040",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41d3650c_106e7680",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1004789
      },
      "writtenOn": "2021-07-13T00:40:40Z",
      "side": 1,
      "message": "ah, excellent, thanks! (you wouldn\u0027t believe how many times i tried clicking on the bold word \"Download\" before realizing they meant a completely different \"Download\" hidden in grey-on-grey in the page header. glad to see it\u0027s not just our UI folks who\u0027re out to get me!)\n\noddly i couldn\u0027t find the A53 (or A7!), but it was definitely interesting and instructive to compare the A55 with the A76.",
      "parentUuid": "20ca510b_b7f44c97",
      "revId": "f1384cf6b99b4612f77a0622e0328ffa8b05a190",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}